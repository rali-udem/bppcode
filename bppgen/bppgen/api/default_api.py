# coding: utf-8

"""
DefaultApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""


# python 2 and python 3 compatibility library
from six import iteritems

from bppgen.api.configuration import Configuration
from bppgen.api.api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_item(self, coll, id, resource_path, kwargs):

        all_params = ['coll', 'id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'coll' is set
        if ('coll' not in params) or (params['coll'] is None):
            raise ValueError("Missing the required parameter `coll` when calling `get_profile`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_profile`")

        resource_path = resource_path.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'coll' in params:
            query_params['coll'] = params['coll']
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
        
    
    def get_offer(self, coll, id, **kwargs):
        return self.get_item(coll, id, '/offers/getOffer', kwargs)
    
    def get_profile(self, coll, id, **kwargs):
        return self.get_item(coll, id, '/profiles/getProfile', kwargs)
        
    def get_transitions(self, function_name, direction, **kwargs):
        """
        
        Recherche des transitions \u00E0 partir d'un nom de poste. <a href=\"http://www-etud.iro.umontreal.ca/~gottif/lbj/FormatTransitions.htm\">Le format de retour est d\u00E9crit ici.</a>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_transitions(function_name, direction, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str function_name: Titre du poste recherch\u00E9 (required)
        :param str direction: Soit <code>future</code> ou <code>past</code>. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['function_name', 'direction']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transitions" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'function_name' is set
        if ('function_name' not in params) or (params['function_name'] is None):
            raise ValueError("Missing the required parameter `function_name` when calling `get_transitions`")
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `get_transitions`")

        resource_path = '/functions/getTransitions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'function_name' in params:
            query_params['functionName'] = params['function_name']
        if 'direction' in params:
            query_params['direction'] = params['direction']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def query_profiles(self, coll, country, language, q, nbresults, **kwargs):
        """
        
        Effectue une recherche plein texte dans les profils des candidats. Les meilleurs r\u00E9sultats sont retourn\u00E9s.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_profiles(coll, country, language, q, nbresults, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coll: Nom de la collection. La valeur sp\u00E9ciale <code>latest</code> signifie la collection la plus r\u00E9cente sur le serveur. (required)
        :param str country: Le pays de la requ\u00EAte. Par exemple, <code>ca</code>, <code>fr</code>, <code>au</code> (required)
        :param str language: Langue d\u00E9tect\u00E9e du profil. Par exemple, <code>en</code> ou <code>fr</code> (required)
        :param str q: Requ\u00EAte plein texte effectu\u00E9e dans les profils. (required)
        :param int nbresults: Nombre maximal de r\u00E9sultats \u00E0 retourner. La requ\u00EAte peut parfois retourner moins de r\u00E9sultats. Parfois aucun. (required)
        :return: list[Hit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coll', 'country', 'language', 'q', 'nbresults']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'coll' is set
        if ('coll' not in params) or (params['coll'] is None):
            raise ValueError("Missing the required parameter `coll` when calling `query_profiles`")
        # verify the required parameter 'country' is set
        if ('country' not in params) or (params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `query_profiles`")
        # verify the required parameter 'language' is set
        if ('language' not in params) or (params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `query_profiles`")
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `query_profiles`")
        # verify the required parameter 'nbresults' is set
        if ('nbresults' not in params) or (params['nbresults'] is None):
            raise ValueError("Missing the required parameter `nbresults` when calling `query_profiles`")

        resource_path = '/profiles/queryProfiles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'coll' in params:
            query_params['coll'] = params['coll']
        if 'country' in params:
            query_params['country'] = params['country']
        if 'language' in params:
            query_params['language'] = params['language']
        if 'q' in params:
            query_params['q'] = params['q']
        if 'nbresults' in params:
            query_params['nbresults'] = params['nbresults']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []


        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Hit]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def query_offers(self, coll, language, q, nbresults, **kwargs):
        """
        
        Effectue une recherche plein texte dans les profils des candidats. Les meilleurs r\u00E9sultats sont retourn\u00E9s.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_profiles(coll, country, language, q, nbresults, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coll: Nom de la collection. La valeur sp\u00E9ciale <code>latest</code> signifie la collection la plus r\u00E9cente sur le serveur. (required)
        :param str country: Le pays de la requ\u00EAte. Par exemple, <code>ca</code>, <code>fr</code>, <code>au</code> (required)
        :param str language: Langue d\u00E9tect\u00E9e du profil. Par exemple, <code>en</code> ou <code>fr</code> (required)
        :param str q: Requ\u00EAte plein texte effectu\u00E9e dans les profils. (required)
        :param int nbresults: Nombre maximal de r\u00E9sultats \u00E0 retourner. La requ\u00EAte peut parfois retourner moins de r\u00E9sultats. Parfois aucun. (required)
        :return: list[Hit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coll', 'country', 'language', 'q', 'nbresults']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        if ('coll' not in params) or (params['coll'] is None):
            raise ValueError("Missing the required parameter `coll` when calling `query_profiles`")
        if ('language' not in params) or (params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `query_profiles`")
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `query_profiles`")
        # verify the required parameter 'nbresults' is set
        if ('nbresults' not in params) or (params['nbresults'] is None):
            raise ValueError("Missing the required parameter `nbresults` when calling `query_profiles`")

        resource_path = '/offers/queryOffers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'coll' in params:
            query_params['coll'] = params['coll']
        if 'language' in params:
            query_params['language'] = params['language']
        if 'q' in params:
            query_params['q'] = params['q']
        if 'nbresults' in params:
            query_params['nbresults'] = params['nbresults']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []


        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Hit]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
